package tp1.logic;import tp1.logic.gameobjects.*;import java.util.ArrayList;import java.util.List;public class AlienManager {    private Game game;    private int remainingAliens;    private Move dir;    private boolean onBorder;    private boolean shouldDescend;    public AlienManager(Game game) {        this.game = game;        dir = Move.LEFT;    }    public GameObjectContainer initialize() {        this.remainingAliens = 0;        GameObjectContainer container = new GameObjectContainer();        initializeUFO(container);        initializeRegularAliens(container);        initializeDestroyerAliens(container);        //TODO fill with your code        return container;    }    private void initializeUFO(GameObjectContainer container) {        // container.add(new Ufo(game));    }    private void initializeRegularAliens(GameObjectContainer container) {        Level level = this.game.getLevel();        for (int row = 0, index = 0; row < level.numRowsRegularAliens; row++) {            for (int col = 0; col < level.getNumAliensPerRow(); col++, index++) {                int reqCenter = (Game.DIM_X / 2) - (level.getNumAliensPerRow() / 2);                container.add(new RegularAlien(                        this.game,                        new Position(col + reqCenter, row + 1),                        2                ));            }        }    }    private void initializeDestroyerAliens(GameObjectContainer container) {        Level level = this.game.getLevel();        for (int i = 0; i < level.numDestroyerAliens; i++) {            int reqCenter = (Game.DIM_X / 2) - (level.getNumAliensPerRow() / 2);            int offset = reqCenter + (level.getNumAliensPerRow() / level.numDestroyerAliens) - 1;            container.add(new DestroyerAlien(                    this.game,                    new Position(i + offset, level.numRowsRegularAliens + 1),                    1            ));        }    }    public void checkOnBorder() { //check if any alien is on the border        for (GameObject gameObject : game.getContainer().getObjects()) {            if (gameObject instanceof AlienShip) {                if (gameObject.isAlive()                        && (gameObject.getPos().row + 1 == Game.DIM_Y || gameObject.getPos().row == 0                        || gameObject.getPos().col + 1 == Game.DIM_X || gameObject.getPos().col == 0)) {                    onBorder = true;                    break; // No need to check once one alien reaches the border                }            }        }    }    public boolean onBorder() { //check if any alien is on the border        boolean onBorder = false;        for (GameObject gameObject : game.getContainer().getObjects()) {            if (gameObject instanceof AlienShip) {                if (gameObject.getPos().col == 0 || gameObject.getPos().col == 8 || gameObject.getPos().row == 8) {                    onBorder = true;                }            }        }        return onBorder;    }    public void moveAlienList() {        int cycle = game.getCycle();        int numCyclesToMoveOneCell = game.getLevel().getNumCyclesToMoveOneCell();//        if (cycle % numCyclesToMoveOneCell == 0) {            checkOnBorder(); //make sure that the whole list is inside the border            if (shouldDescend) {                moveAllDown(); // move down in this  cycle                shouldDescend = false; // reset for  next cycle so that it doesnt keep moving down            } else {                // move all aliens to the left                if (dir == Move.LEFT) {                    for (GameObject gameObject : game.getContainer().getObjects()) {                        if (gameObject instanceof AlienShip) {                            gameObject.setPos(gameObject.getPos().move(Move.LEFT));                        }                    }                } else if (dir == Move.RIGHT) {                    for (GameObject gameObject : game.getContainer().getObjects()) {                        if (gameObject instanceof AlienShip) {                            gameObject.setPos(gameObject.getPos().move(Move.RIGHT));                        }                    }                    // after moving, switch direction if needed                    if (onBorder()) {                        shouldDescend = true; // put so that they descend in the next cycle                        if (dir == Move.LEFT) {                            dir = Move.RIGHT; // move to  right or left after descending                        } else {                            dir = Move.LEFT;                        }                    }                    onBorder = false;                }            }        }//    }    public void moveAllDown() {        for (GameObject gameObject : game.getContainer().getObjects()) {            if (gameObject instanceof AlienShip) {                if (gameObject.isAlive()) {                    gameObject.setPos(gameObject.getPos().move(Move.DOWN));                }            }        }    }}